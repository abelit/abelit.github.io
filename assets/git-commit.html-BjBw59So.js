import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as i,f as a}from"./app-C7nDDXNs.js";const n={},o=a(`<h2 id="git-的最佳实践-良好的commit-✔-vs-糟糕的commit-❌" tabindex="-1"><a class="header-anchor" href="#git-的最佳实践-良好的commit-✔-vs-糟糕的commit-❌"><span>Git 的最佳实践：良好的commit ✔ VS. 糟糕的commit ❌</span></a></h2><p>在软体或Web 开发的奇妙世界中，版本控制是每个与其他开发人员一起开发专案的开发人员必须具备的能力之一。 Git 是最常用的版本控制系统之一，它可以帮助开发人员追踪变更、有效地返回到先前的状态并作为专案团队进行工作。但是，只有正确管理提交，Git 才能发挥其作用。在本文中，我们将介绍那些好的和坏的提交，向您解释最佳实践，以获得清晰的、资讯丰富的、有用的提交历史记录。</p><h2 id="什么是commit" tabindex="-1"><a class="header-anchor" href="#什么是commit"><span>什么是commit？</span></a></h2><p>在Git 中，提交是指程式码在某一特定时间点的状态。提交元资料（作者、时间戳记、提交讯息等）。提交用于保存进度、声明变更以及将已开发的部分与其他工作合并。</p><h2 id="良好commit-的特征" tabindex="-1"><a class="header-anchor" href="#良好commit-的特征"><span>良好commit 的特征</span></a></h2><p>**原子性和集中性：**提交应该是原子性的－它必须代表一个且仅一个逻辑变更。不要在一次提交中混合多个独立的更改。</p><p>例子：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code># Good commit
git commit -m &quot;Add user authentication&quot;
# Bad commit
git commit -m &quot;Add user authentication and update UI styles&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>**描述性提交讯息：**描述性提交讯息清楚地解释了提交的作用以及进行更改的原因。它应该为其他人（以及未来的你）提供足够的背景，以便在不阅读程式码的情况下理解更改。</p><p>例子：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code># Good commit message
git commit -m &quot;Fix Correct null pointer exception in user login&quot;
# Bad commit message
git commit -m &quot;Fix bug&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>**遵循传统提交指南：**您可以使用标准提交指南来保持git 历史记录干净、一致且易于阅读。通常这些指南以类型（功能、修复、杂务、重构文件）和简短摘要的形式进行解释，偶尔还会有长篇解释或对其他相关问题的参考。</p><p>例子：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code># Good commit message following conventional guidelines
git commit -m &quot;feat(auth): add JWT-based authentication&quot;
git commit -m &quot;fix(login): resolve race condition in login flow&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>**测试和验证：**确保提交中的变更已经过测试并正确执行。损坏/未经测试的程式码可能会干扰流程和其他成员。</p><p>**适当的范围：**适当地确定你的提交范围。例如，如果您正在开发特定功能或修复错误，请确保与该任务相关的所有变更都包含在一次提交中。避免可能使程式码库处于不一致状态的部分变更。</p><p>例子：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code># Good commit with proper scope
git commit -m &quot;refactor(auth): split auth logic into separate module&quot;
# Bad commit with mixed scope
git commit -m &quot;refactor and minor fixes&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="错误提交的特征" tabindex="-1"><a class="header-anchor" href="#错误提交的特征"><span>错误提交的特征</span></a></h2><p>**大型且不集中：**具有太多更改的提交是一个糟糕的提交。很难理解提交的作用。大型、不集中的提交很难审查和除错。</p><p>例子：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code># Bad commit
git commit -m &quot;Update project&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>**含糊或误导性讯息：**含糊或误导性的提交讯息不会提供有关更改的有用资讯。缺乏细节可能会导致混乱，并使追踪变更历史变得困难。</p><p>例子：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code># Bad commit message
git commit -m &quot;Stuff&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>**不相关的更改：**将不相关的更改合并到单一提交中会导致很难隔离特定的更改，这可能会引入错误并使审核过程复杂化。</p><p>例子：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code># Bad commit
git commit -m &quot;Update readme and fix login issue&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>**不完整或未经测试的程式码：**提交不完整或未经测试的程式码可能会破坏工作流程，给其他团队成员带来问题，并可能破坏建置。</p><p>**缺乏上下文：**糟糕的提交通常缺乏上下文，使得很难理解为什么要进行更改。这可能会导致将来重新存取程式码时出现混乱和困难。</p><h2 id="良好承诺的最佳实践" tabindex="-1"><a class="header-anchor" href="#良好承诺的最佳实践"><span>良好承诺的最佳实践</span></a></h2><ol><li><p>**经常提交，但不要太频繁：**努力在提交太频繁和提交不够之间取得平衡。每次提交都应该代表一次有意义的更改。切勿在一次提交中推送不相关的变更。</p></li><li><p>**撰写清晰且描述性的讯息：**您的提交讯息应该解释提交的作用以及进行更改的原因。</p></li><li><p>**有效使用分支：**使用功能分支来实现新功能、错误修复和实验。向这些分支提出拉取请求，专案经理或管理员将审查您的程式码并将它们合并到主分支中。</p></li><li><p>**审查和压缩提交：**如果您是专案拥有者、领导者、管理员或审查程式码的人员，则在合并分支之前，请检视并将小型或修复提交压缩为逻辑单元。这种做法可以保持提交历史记录干净且易于遵循。</p></li><li><p>**自动化测试：**使用持续整合工具在每次提交时自动测试您的程式码。这可确保您的变更得到验证并降低引入错误的风险。</p></li><li><p>**使用Husky：**使用像husky 这样的函式库可以提升你的git 技能。如果您违反了husky 中配置的规则，它不允许提交。</p></li></ol><h2 id="结论" tabindex="-1"><a class="header-anchor" href="#结论"><span>结论</span></a></h2><p>良好的提交对于在Git 中维护清晰且易于理解的专案历史记录非常重要。透过遵循最佳实践（例如保持提交原子性、编写描述性讯息以及确保测试变更），您可以改善协作并使您的专案超级可维护。管理良好的提交历史记录对于未来的自己、团队或新合作者来说是宝贵的资源。</p><p>透过遵循上述准则，您将使参与专案的每个人都更容易理解、审查和建立您的工作。快乐承诺！</p>`,35),m=[o];function l(d,c){return e(),i("div",null,m)}const p=t(n,[["render",l],["__file","git-commit.html.vue"]]),u=JSON.parse('{"path":"/guide/tool/git/git-commit.html","title":"Git提交","lang":"zh-CN","frontmatter":{"title":"Git提交","description":"Git 的最佳实践：良好的commit ✔ VS. 糟糕的commit ❌ 在软体或Web 开发的奇妙世界中，版本控制是每个与其他开发人员一起开发专案的开发人员必须具备的能力之一。 Git 是最常用的版本控制系统之一，它可以帮助开发人员追踪变更、有效地返回到先前的状态并作为专案团队进行工作。但是，只有正确管理提交，Git 才能发挥其作用。在本文中，我们...","head":[["meta",{"property":"og:url","content":"https://github.com/abelit/abelit-datapeacock.git/guide/tool/git/git-commit.html"}],["meta",{"property":"og:site_name","content":"数之雀"}],["meta",{"property":"og:title","content":"Git提交"}],["meta",{"property":"og:description","content":"Git 的最佳实践：良好的commit ✔ VS. 糟糕的commit ❌ 在软体或Web 开发的奇妙世界中，版本控制是每个与其他开发人员一起开发专案的开发人员必须具备的能力之一。 Git 是最常用的版本控制系统之一，它可以帮助开发人员追踪变更、有效地返回到先前的状态并作为专案团队进行工作。但是，只有正确管理提交，Git 才能发挥其作用。在本文中，我们..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-03T08:57:34.000Z"}],["meta",{"property":"article:author","content":"Abelit"}],["meta",{"property":"article:modified_time","content":"2024-08-03T08:57:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Git提交\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-03T08:57:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Abelit\\",\\"url\\":\\"https://github.com/abelit\\"}]}"]]},"headers":[{"level":2,"title":"Git 的最佳实践：良好的commit ✔ VS. 糟糕的commit ❌","slug":"git-的最佳实践-良好的commit-✔-vs-糟糕的commit-❌","link":"#git-的最佳实践-良好的commit-✔-vs-糟糕的commit-❌","children":[]},{"level":2,"title":"什么是commit？","slug":"什么是commit","link":"#什么是commit","children":[]},{"level":2,"title":"良好commit 的特征","slug":"良好commit-的特征","link":"#良好commit-的特征","children":[]},{"level":2,"title":"错误提交的特征","slug":"错误提交的特征","link":"#错误提交的特征","children":[]},{"level":2,"title":"良好承诺的最佳实践","slug":"良好承诺的最佳实践","link":"#良好承诺的最佳实践","children":[]},{"level":2,"title":"结论","slug":"结论","link":"#结论","children":[]}],"git":{"createdTime":1722675454000,"updatedTime":1722675454000,"contributors":[{"name":"abelit","email":"ychenid@live.com","commits":1}]},"readingTime":{"minutes":4.94,"words":1483},"filePathRelative":"guide/tool/git/git-commit.md","localizedDate":"2024年8月3日","autoDesc":true,"excerpt":"<h2>Git 的最佳实践：良好的commit ✔ VS. 糟糕的commit ❌</h2>\\n<p>在软体或Web 开发的奇妙世界中，版本控制是每个与其他开发人员一起开发专案的开发人员必须具备的能力之一。 Git 是最常用的版本控制系统之一，它可以帮助开发人员追踪变更、有效地返回到先前的状态并作为专案团队进行工作。但是，只有正确管理提交，Git 才能发挥其作用。在本文中，我们将介绍那些好的和坏的提交，向您解释最佳实践，以获得清晰的、资讯丰富的、有用的提交历史记录。</p>\\n<h2>什么是commit？</h2>\\n<p>在Git 中，提交是指程式码在某一特定时间点的状态。提交元资料（作者、时间戳记、提交讯息等）。提交用于保存进度、声明变更以及将已开发的部分与其他工作合并。</p>"}');export{p as comp,u as data};
